# Copyright (c) 2004-2017 VerifWorks, Bangalore, India
# http://www.verifworks.com 
# Contact: support@verifworks.com 
# 
# This program is part of Go2UVM at www.go2uvm.org
# Some portions of Go2UVM are free software.
# You can redistribute it and/or modify  
# it under the terms of the GNU Lesser General Public License as   
# published by the Free Software Foundation, version 3.
#
# VerifWorks reserves the right to obfuscate part or full of the code
# at any point in time. 
# We also support a comemrical licensing option for an enhanced version
# of Go2UVM, please contact us via support@verifworks.com
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
# Lesser General Lesser Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# --------------------------------------------------------------------------------
#
# [Name]     
#   VW_DVC_go2uvm.tcl
#
# [Version]  
#   1.0
#
# [Abstract]
#   Create SystemVerilog Interface for given RTL TOP level
#
# [Procedure]
#   vw_dvc_svi
#
#  # --------------------------------------------------------------------------------

namespace eval vw_dvc {
  variable in_port_names_l []
  variable out_port_names_l []
  variable inout_port_names_l []
}

proc dump_header { LOG } {
  puts $LOG "/********************************************"
  puts $LOG "* VerifWorks Go2UVM App: VW_DVC_Go2UVM"
  puts $LOG "* Automatically generated by VerifWorks's DVC_Go2UVM Riviera Apps "
  puts $LOG "* Thanks for using VerifWorks products"
  puts $LOG "* Visit http://www.verifworks.com for more "
  set t [clock seconds]
  set format_str [clock format $t -format "%Y-%m-%d %H:%M:%S"]
  puts $LOG "* Generated on   : $format_str"
  puts $LOG "********************************************/ \n\n"
}


proc wsplit {string sep} {
    set first [string first $sep $string]
    if {$first == -1} {
      return [list $string]
    } else {
      set tmp_l [string length $sep]
      set left [string range $string 0 [expr {$first-1}]]
      set right [string range $string [expr {$first+$tmp_l}] end]
      return [concat [list $left] [wsplit $right $sep]]
    }
}

proc vw_dvc_svi {LOG top_mod } {
  set mod_name      $top_mod
  puts $LOG "// Generating SystemVerilog interface for module: $mod_name"
  puts $LOG "// ---------------------------------------------------------"

  set in_ports [find object -in -list -path /$top_mod *]
  set out_ports [find object -out -list -path /$top_mod *]
  set inout_ports [find object -inout -list -path /$top_mod *]
  set total_num_ports [expr [llength $in_ports] + [llength $out_ports] + [llength $inout_ports]]

  # Create INPUT port name & size
  # set in_port_names_l []
  set in_port_sizes_l []
  foreach item $in_ports {
    set port_des [describe $item]
    set tmp_s [split $item /]
    set tmp_last_val_index [expr [llength $tmp_s] - 1]
    set tmp_port_name [lindex $tmp_s $tmp_last_val_index]
    lappend ::vw_dvc::in_port_names_l $tmp_port_name

    set tmp_s [wsplit $port_des "\n"]
    set tmp1_s [lindex $tmp_s 0]
    if {[string match *Net* $tmp1_s]} {
      set tmp2_s [wsplit $tmp1_s Net]
      puts "Found Net"
    } elseif {[string match *Logic* $tmp1_s]} {
      set tmp2_s [wsplit $tmp1_s Logic]
      puts "Found Logic"
    } else {
      set tmp2_s [wsplit $tmp1_s Net]
      puts "Found UNKNOWN datatype for port $tmp_port_name treating as Net"
    }
      
    set tmp_last_val_index [expr [llength $tmp2_s] - 1]
    set tmp_port_size [lindex $tmp2_s $tmp_last_val_index]
    # echo "SV: $tmp_port_size"
    if {$tmp_port_size == ""} {
      #echo "Single bit"
      set tmp_port_size { }
    }
    lappend in_port_sizes_l $tmp_port_size
    echo "IN: $tmp_port_name $tmp_port_size"
  }
  # Create OUTPUT port name & size
  set out_port_sizes_l []
  foreach item $out_ports {
    set port_des [describe $item]
    set tmp_s [split $item /]
    set tmp_last_val_index [expr [llength $tmp_s] - 1]
    set tmp_port_name [lindex $tmp_s $tmp_last_val_index]
    lappend ::vw_dvc::out_port_names_l $tmp_port_name

    set tmp_s [wsplit $port_des "\n"]
    set tmp1_s [lindex $tmp_s 0]

    set found_net [string match *Net* $tmp1_s]

    if {$found_net == 1} {
      set tmp2_s [wsplit $tmp1_s Net]
    } elseif {[string match *Logic* $tmp1_s]} {
      set tmp2_s [wsplit $tmp1_s Logic]
    } else {
      set tmp2_s [wsplit $tmp1_s Register]
    }
    set tmp_last_val_index [expr [llength $tmp2_s] - 1]
    set tmp_port_size [lindex $tmp2_s $tmp_last_val_index]
    # echo "SV: $tmp_port_size"
    if {$tmp_port_size == ""} {
      #echo "Single bit"
      set tmp_port_size { }
    }
    lappend out_port_sizes_l $tmp_port_size
    echo "OUT: $tmp_port_name $tmp_port_size"
  }

  # Create INOUT port name & size
  set inout_port_sizes_l []
  foreach item $inout_ports {
    set port_des [describe $item]
    set tmp_s [split $item /]
    set tmp_last_val_index [expr [llength $tmp_s] - 1]
    set tmp_port_name [lindex $tmp_s $tmp_last_val_index]
    lappend ::vw_dvc::inout_port_names_l $tmp_port_name

    set tmp_s [wsplit $port_des "\n"]
    set tmp1_s [lindex $tmp_s 0]
    if {[string match *Net* $tmp1_s]} {
      set tmp2_s [wsplit $tmp1_s Net]
      puts "Found Net"
    } elseif {[string match *Logic* $tmp1_s]} {
      set tmp2_s [wsplit $tmp1_s Logic]
      puts "Found Logic"
    } else {
      set tmp2_s [wsplit $tmp1_s Net]
      puts "Found UNKNOWN datatype for port $tmp_port_name treating as Net"
    }
    set tmp_last_val_index [expr [llength $tmp2_s] - 1]
    set tmp_port_size [lindex $tmp2_s $tmp_last_val_index]
    # echo "SV: $tmp_port_size"
    if {$tmp_port_size == ""} {
      #echo "Single bit"
      set tmp_port_size { }
    }
    lappend inout_port_sizes_l $tmp_port_size
    echo "INOUT: $tmp_port_name $tmp_port_size"
  }

  puts $LOG "// Using VW_CLK as a text macro for clock "
  puts $LOG "// If your clock signal is named other than clk, change the macro below"
  puts $LOG "`define VW_CLK clk"

  set intf_hdr [format "interface %s_if (input logic `VW_CLK);" $mod_name]
  puts $LOG "$intf_hdr"

  set num_in_ports [llength $::vw_dvc::in_port_names_l]
  set cur_port_num 0
  while { $cur_port_num < $num_in_ports } { 
    set port_name [lindex $::vw_dvc::in_port_names_l $cur_port_num]
    if {$port_name == "clk"} {
      # Skip clk signal
      incr cur_port_num
      continue
    }
    set port_size [lindex $in_port_sizes_l $cur_port_num]
    set intf_hdr [format "  logic %s %s;" $port_size $port_name]
    puts $LOG "$intf_hdr"
    incr cur_port_num
  }
        
  set num_out_ports [llength $::vw_dvc::out_port_names_l]
  set cur_port_num 0
  while { $cur_port_num < $num_out_ports } { 
    set port_name [lindex $::vw_dvc::out_port_names_l $cur_port_num]
    set port_size [lindex $out_port_sizes_l $cur_port_num]
    set intf_hdr [format "  logic %s %s;" $port_size $port_name]
    puts $LOG "$intf_hdr"
    set cur_port_num [expr $cur_port_num + 1]
  }
        
  set num_inout_ports [llength $::vw_dvc::inout_port_names_l]
  set cur_port_num 0
  while { $cur_port_num < $num_inout_ports } { 
    set port_name [lindex $::vw_dvc::inout_port_names_l $cur_port_num]
    set port_size [lindex $inout_port_sizes_l $cur_port_num]
    set intf_hdr [format "  logic %s %s;" $port_size $port_name]
    puts $LOG "$intf_hdr"
    set cur_port_num [expr $cur_port_num + 1]
  }
        
  puts $LOG "  // End of interface signals "
  puts $LOG "\n\n  // Start of clocking block definition "

  # All interface signals declared
  # Start clocking block generation
  set cb_line "  clocking cb @(posedge `VW_CLK);" 
  puts $LOG "$cb_line"
  set cur_port_num 0
  while { $cur_port_num < $num_in_ports } { 
    set port_name [lindex $::vw_dvc::in_port_names_l $cur_port_num]
    if {$port_name == "clk"} {
      # Skip clk signal
      incr cur_port_num
      continue
    }
    set cb_line [format "    output %s;" $port_name]
    puts $LOG "$cb_line"
    set cur_port_num [expr $cur_port_num + 1]
  }
        
  set num_out_ports [llength $::vw_dvc::out_port_names_l]
  set cur_port_num 0
  while { $cur_port_num < $num_out_ports } { 
    set port_name [lindex $::vw_dvc::out_port_names_l $cur_port_num]
    set cb_line [format "    input %s;" $port_name]
    puts $LOG "$cb_line"
    set cur_port_num [expr $cur_port_num + 1]
  }
        
  set num_inout_ports [llength $::vw_dvc::inout_port_names_l]
  set cur_port_num 0
  while { $cur_port_num < $num_inout_ports } { 
    set port_name [lindex $::vw_dvc::inout_port_names_l $cur_port_num]
    set cb_line [format "    inout %s;" $port_name]
    puts $LOG "$cb_line"
    set cur_port_num [expr $cur_port_num + 1]
  }
   # End of while  -- clocking block gen

  set cb_line [format "  endclocking : cb"]
  puts $LOG "$cb_line"
  puts $LOG "  // End of clocking block definition "

  # End of clocking block generation
  # Start modport generation

  puts $LOG ""
  set intf_hdr [format "endinterface : %s_if" $mod_name]
  puts $LOG "$intf_hdr"

}

proc vw_dvc_g2u_test {LOG top_mod } {
  set mod_name      $top_mod
  puts $LOG "// Generating Go2UVM Test for module: $mod_name"
  puts $LOG "// ---------------------------------------------------------"
  puts $LOG "" 
  puts $LOG "// Automatically generated from VerifWorks's DVCreate-Go2UVM product"
  puts $LOG "// Thanks for using VerifWorks products, see http://www.verifworks.com for more"
  puts $LOG "" 
  puts $LOG "import uvm_pkg::*;"
  puts $LOG "`include \"vw_go2uvm_macros.svh\""
  puts $LOG "// Import Go2UVM Package"   
  puts $LOG "import vw_go2uvm_pkg::*;"
  puts $LOG ""
  puts $LOG "// Use the base class provided by the vw_go2uvm_pkg"
  set class_hdr [format "class %s_test extends go2uvm_base_test;" $top_mod]
  puts $LOG "$class_hdr"
  puts $LOG "  // Create a handle to the actual interface"
  set class_hdr [format "  virtual %s_if vif;" $top_mod]
  puts $LOG ""
  puts $LOG "$class_hdr"
  set class_hdr [format "  task reset;" $top_mod]
  puts $LOG "$class_hdr"
  puts $LOG "    `g2u_display (log_id, \"Start of reset\", UVM_MEDIUM)"
  puts $LOG "    `g2u_display (log_id, \"Fill in your reset logic here \", UVM_MEDIUM)"
  puts $LOG "    // this.vif.cb.rst_n <= 1'b0;"
  puts $LOG "    // repeat (5) @ (this.vif.cb);"
  puts $LOG "    // this.vif.cb.rst_n <= 1'b1;"
  puts $LOG "    // repeat (1) @ (this.vif.cb);"
  puts $LOG "    `g2u_display (log_id, \"End of reset\", UVM_MEDIUM)"
  puts $LOG "  endtask : reset"
  puts $LOG ""
  puts $LOG "  task main ();"
  puts $LOG "    `g2u_display (log_id, \"Start of main\", UVM_MEDIUM)"
  puts $LOG "    `g2u_display (log_id, \"Fill in your main logic here \", UVM_MEDIUM)"
  puts $LOG "    // this.vif.cb.inp_1 <= 1'b0;"
  puts $LOG "    // this.vif.cb.inp_2 <= 22;"
  puts $LOG "    // repeat (5) @ (this.vif.cb);"
  puts $LOG "    `g2u_display (log_id, \"End of main\", UVM_MEDIUM)"
  puts $LOG "  endtask : main"
  puts $LOG ""
  set class_hdr [format "endclass : %s_test" $top_mod]
  puts $LOG "$class_hdr"
  puts $LOG ""
}


proc vw_dvc_g2u_top_mod {LOG top_mod if_fname test_fname } {
  set mod_name      $top_mod
  puts $LOG "// Generating Go2UVM top module for DUT: $mod_name"
  puts $LOG "// ---------------------------------------------------------"
#  puts $LOG "`include \"$if_fname\""
#  puts $LOG "`include \"$test_fname\""
  set class_hdr [format "`include \"%s_if.sv\"" $top_mod]
  puts $LOG "$class_hdr"
  set class_hdr [format "`include \"%s_go2uvm_test.svi\"" $top_mod]
  puts $LOG "$class_hdr"

  set class_hdr [format "module go2uvm_%s;" $top_mod]
  puts $LOG "$class_hdr"
  puts $LOG "  timeunit 1ns;"
  puts $LOG "  timeprecision 1ns;"
  puts $LOG "  parameter VW_CLK_PERIOD = 10;"
  puts $LOG ""
  puts $LOG "  // Simple clock generator"
  puts $LOG "  bit `VW_CLK ;"
  puts $LOG "  always # (VW_CLK_PERIOD/2) `VW_CLK <= ~`VW_CLK;"
  puts $LOG ""
  puts $LOG "  // Interface instance"
  set if_inst_name [format "%s_if_0" $top_mod]
  set mod_line [format "%s_if %s (.*);" $top_mod $if_inst_name]
  puts $LOG "  $mod_line"
  puts $LOG ""
  puts $LOG "  // Connect TB clk to Interface instance clk"
  puts $LOG ""
  set total_num_ports [expr [llength $::vw_dvc::in_port_names_l] + [llength $::vw_dvc::out_port_names_l] + [llength $::vw_dvc::inout_port_names_l]]

  set all_ports_l []
  foreach item $::vw_dvc::in_port_names_l {
    lappend all_ports_l  $item
  }
  foreach item $::vw_dvc::out_port_names_l {
    lappend all_ports_l  $item
  }
  foreach item $::vw_dvc::inout_port_names_l {
    lappend all_ports_l  $item
  }
  set total_num_ports [llength $all_ports_l]

  puts $LOG "  // DUT instance"
  set mod_line [format "%s %s_0 (" $top_mod $top_mod]
  puts $LOG "  $mod_line"
  set tmp_iter 1
  foreach item $all_ports_l {
    if {$tmp_iter < $total_num_ports} {
      set mod_line [format "    .%s(%s.%s)," $item $if_inst_name $item]
    } else {
      set mod_line [format "    .%s(%s.%s)" $item $if_inst_name $item]
    }
    puts $LOG $mod_line
    incr tmp_iter
  }
  puts $LOG "  );"
  puts $LOG ""
  puts $LOG ""
  puts $LOG "  // Using VW_Go2UVM"
  set mod_line [format "%s_test %s_test_0;" $top_mod $top_mod]
  puts $LOG "  $mod_line" 
  puts $LOG "  initial begin : go2uvm_test"
  set mod_line [format "  %s_test_0 = new ();" $top_mod]
  puts $LOG "  $mod_line" 
  puts $LOG "    // Connect virtual interface to physical interface"
  set mod_line [format "%s_test_0.vif = %s_if_0;" $top_mod $top_mod]
  puts $LOG "    $mod_line"
  puts $LOG "    // Kick start standard UVM phasing"
  puts $LOG "    run_test ();"
  puts $LOG "  end : go2uvm_test"
  set mod_line [format "endmodule : go2uvm_%s" $top_mod]
  puts $LOG "$mod_line"
  puts $LOG ""
}


########################
# Go2UVM library
########################
# encrypted keywords

proc vw_go2uvm_enc_keyword { LOG }  {

  puts $LOG "`define	VW_KW_619290071 	 <<<" 
  puts $LOG "`define	VW_KW_1238433452 	 >=" 
  puts $LOG "`define	VW_KW_1402586708 	 ==" 
  puts $LOG "`define	VW_KW_1273911899 	 >>"
  puts $LOG "`define	VW_KW_559412924 	 &&" 
  puts $LOG "`define	VW_KW_238962600 	 <=" 
  puts $LOG "`define	VW_KW_1665947468 	 >>>" 
  puts $LOG "`define	VW_KW_1470503465 	 %" 
  puts $LOG "`define	VW_KW_188213258 	 !==" 
  puts $LOG "`define	VW_KW_238962601 	 <<="
  puts $LOG "`define	VW_KW_1369321801 	 ~" 
  puts $LOG "`define	VW_KW_745425661 	 &"
  puts $LOG "`define	VW_KW_1431419379 	 <<" 
  puts $LOG "`define	VW_KW_552473416 	 !=" 
  puts $LOG "`define	VW_KW_1143408282 	 ===" 
  puts $LOG "`define	VW_KW_7684930 	 @ "
  puts $LOG "`define	VW_KW_1804289383 	 accept_on "
  puts $LOG "`define	VW_KW_846930886 	 alias "
  puts $LOG "`define	VW_KW_1681692777 	 always "
  puts $LOG "`define	VW_KW_1714636915 	 always_comb "
  puts $LOG "`define	VW_KW_1957747793 	 always_ff "
  puts $LOG "`define	VW_KW_424238335 	 always_latch "
  puts $LOG "`define	VW_KW_719885386 	 and "
  puts $LOG "`define	VW_KW_1649760492 	 assert "
  puts $LOG "`define	VW_KW_596516649 	 assign "
  puts $LOG "`define	VW_KW_1189641421 	 assume "
  puts $LOG "`define	VW_KW_1025202362 	 automatic "
  puts $LOG "`define	VW_KW_1350490027 	 before "
  puts $LOG "`define	VW_KW_783368690 	 begin "
  puts $LOG "`define	VW_KW_1102520059 	 bind "
  puts $LOG "`define	VW_KW_2044897763 	 bins "
  puts $LOG "`define	VW_KW_1967513926 	 binsof "
  puts $LOG "`define	VW_KW_1365180540 	 bit "
  puts $LOG "`define	VW_KW_1540383426 	 break "
  puts $LOG "`define	VW_KW_304089172 	 buf "
  puts $LOG "`define	VW_KW_1303455736 	 bufif0 "
  puts $LOG "`define	VW_KW_35005211 	 bufif1 "
  puts $LOG "`define	VW_KW_521595368 	 byte "
  puts $LOG "`define	VW_KW_294702567 	 case "
  puts $LOG "`define	VW_KW_1726956429 	 casex "
  puts $LOG "`define	VW_KW_336465782 	 casez "
  puts $LOG "`define	VW_KW_861021530 	 cell "
  puts $LOG "`define	VW_KW_278722862 	 chandle "
  puts $LOG "`define	VW_KW_233665123 	 checker "
  puts $LOG "`define	VW_KW_2145174067 	 class "
  puts $LOG "`define	VW_KW_468703135 	 clocking "
  puts $LOG "`define	VW_KW_1101513929 	 cmos "
  puts $LOG "`define	VW_KW_1801979802 	 config "
  puts $LOG "`define	VW_KW_1315634022 	 const "
  puts $LOG "`define	VW_KW_635723058 	 constraint "
  puts $LOG "`define	VW_KW_1369133069 	 context "
  puts $LOG "`define	VW_KW_1125898167 	 continue "
  puts $LOG "`define	VW_KW_1059961393 	 cover "
  puts $LOG "`define	VW_KW_2089018456 	 covergroup "
  puts $LOG "`define	VW_KW_628175011 	 coverpoint "
  puts $LOG "`define	VW_KW_1656478042 	 cross "
  puts $LOG "`define	VW_KW_1131176229 	 deassign "
  puts $LOG "`define	VW_KW_1653377373 	 default "
  puts $LOG "`define	VW_KW_859484421 	 defparam "
  puts $LOG "`define	VW_KW_1914544919 	 design "
  puts $LOG "`define	VW_KW_608413784 	 disable "
  puts $LOG "`define	VW_KW_756898537 	 dist "
  puts $LOG "`define	VW_KW_1734575198 	 do "
  puts $LOG "`define	VW_KW_1973594324 	 edge "
  puts $LOG "`define	VW_KW_2038664370 	 end "
  puts $LOG "`define	VW_KW_1129566413 	 endcase "
  puts $LOG "`define	VW_KW_184803526 	 endchecker "
  puts $LOG "`define	VW_KW_412776091 	 endclass "
  puts $LOG "`define	VW_KW_1424268980 	 endclocking "
  puts $LOG "`define	VW_KW_1911759956 	 endconfig "
  puts $LOG "`define	VW_KW_749241873 	 endfunction "
  puts $LOG "`define	VW_KW_137806862 	 endgenerate "
  puts $LOG "`define	VW_KW_42999170 	 endgroup "
  puts $LOG "`define	VW_KW_982906996 	 endinterface "
  puts $LOG "`define	VW_KW_135497281 	 endmodule "
  puts $LOG "`define	VW_KW_511702305 	 endpackage "
  puts $LOG "`define	VW_KW_2084420925 	 endprimitive "
  puts $LOG "`define	VW_KW_1937477084 	 endprogram "
  puts $LOG "`define	VW_KW_1827336327 	 endproperty "
  puts $LOG "`define	VW_KW_1159126505 	 endsequence "
  puts $LOG "`define	VW_KW_572660336 	 endspecify "
  puts $LOG "`define	VW_KW_805750846 	 endtable "
  puts $LOG "`define	VW_KW_1632621729 	 endtask "
  puts $LOG "`define	VW_KW_1100661313 	 enum "
  puts $LOG "`define	VW_KW_1433925857 	 event "
  puts $LOG "`define	VW_KW_1141616124 	 eventually "
  puts $LOG "`define	VW_KW_84353895 	 expect "
  puts $LOG "`define	VW_KW_939819582 	 export "
  puts $LOG "`define	VW_KW_2001100545 	 extends "
  puts $LOG "`define	VW_KW_1998898814 	 extern "
  puts $LOG "`define	VW_KW_1548233367 	 final "
  puts $LOG "`define	VW_KW_610515434 	 first_match "
  puts $LOG "`define	VW_KW_1585990364 	 for "
  puts $LOG "`define	VW_KW_1374344043 	 force "
  puts $LOG "`define	VW_KW_760313750 	 foreach "
  puts $LOG "`define	VW_KW_1477171087 	 forever "
  puts $LOG "`define	VW_KW_356426808 	 fork "
  puts $LOG "`define	VW_KW_945117276 	 forkjoin "
  puts $LOG "`define	VW_KW_1889947178 	 function "
  puts $LOG "`define	VW_KW_1780695788 	 generate "
  puts $LOG "`define	VW_KW_709393584 	 genvar "
  puts $LOG "`define	VW_KW_491705403 	 global "
  puts $LOG "`define	VW_KW_1918502651 	 highz0 "
  puts $LOG "`define	VW_KW_752392754 	 highz1 "
  puts $LOG "`define	VW_KW_2053999932 	 iff "
  puts $LOG "`define	VW_KW_1264095060 	 ifnone "
  puts $LOG "`define	VW_KW_1411549676 	 ignore_bins "
  puts $LOG "`define	VW_KW_1843993368 	 illegal_bins "
  puts $LOG "`define	VW_KW_943947739 	 implements "
  puts $LOG "`define	VW_KW_1984210012 	 implies "
  puts $LOG "`define	VW_KW_855636226 	 import "
  puts $LOG "`define	VW_KW_1956297539 	 initial "
  puts $LOG "`define	VW_KW_1036140795 	 inout "
  puts $LOG "`define	VW_KW_463480570 	 input "
  puts $LOG "`define	VW_KW_2040651434 	 inside "
  puts $LOG "`define	VW_KW_1975960378 	 instance "
  puts $LOG "`define	VW_KW_317097467 	 int "
  puts $LOG "`define	VW_KW_1892066601 	 integer "
  puts $LOG "`define	VW_KW_1376710097 	 interconnect "
  puts $LOG "`define	VW_KW_927612902 	 interface "
  puts $LOG "`define	VW_KW_1330573317 	 intersect "
  puts $LOG "`define	VW_KW_603570492 	 join "
  puts $LOG "`define	VW_KW_1687926652 	 join_any "
  puts $LOG "`define	VW_KW_660260756 	 join_none "
  puts $LOG "`define	VW_KW_959997301 	 large "
  puts $LOG "`define	VW_KW_485560280 	 let "
  puts $LOG "`define	VW_KW_402724286 	 liblist "
  puts $LOG "`define	VW_KW_593209441 	 library "
  puts $LOG "`define	VW_KW_1194953865 	 local "
  puts $LOG "`define	VW_KW_894429689 	 localparam "
  puts $LOG "`define	VW_KW_364228444 	 LOGic "
  puts $LOG "`define	VW_KW_1947346619 	 longint "
  puts $LOG "`define	VW_KW_221558440 	 macromodule "
  puts $LOG "`define	VW_KW_270744729 	 matches "
  puts $LOG "`define	VW_KW_1063958031 	 medium "
  puts $LOG "`define	VW_KW_1633108117 	 modport "
  puts $LOG "`define	VW_KW_2114738097 	 module "
  puts $LOG "`define	VW_KW_2007905771 	 nand "
  puts $LOG "`define	VW_KW_1469834481 	 negedge "
  puts $LOG "`define	VW_KW_822890675 	 nettype "
  puts $LOG "`define	VW_KW_1610120709 	 new "
  puts $LOG "`define	VW_KW_791698927 	 nexttime "
  puts $LOG "`define	VW_KW_631704567 	 nmos "
  puts $LOG "`define	VW_KW_498777856 	 nor "
  puts $LOG "`define	VW_KW_1255179497 	 noshowcancelled "
  puts $LOG "`define	VW_KW_524872353 	 not "
  puts $LOG "`define	VW_KW_327254586 	 notif0 "
  puts $LOG "`define	VW_KW_1572276965 	 notif1 "
  puts $LOG "`define	VW_KW_269455306 	 null "
  puts $LOG "`define	VW_KW_1703964683 	 or "
  puts $LOG "`define	VW_KW_352406219 	 output "
  puts $LOG "`define	VW_KW_1600028624 	 package "
  puts $LOG "`define	VW_KW_160051528 	 packed "
  puts $LOG "`define	VW_KW_2040332871 	 parameter "
  puts $LOG "`define	VW_KW_112805732 	 pmos "
  puts $LOG "`define	VW_KW_1120048829 	 posedge "
  puts $LOG "`define	VW_KW_378409503 	 primitive "
  puts $LOG "`define	VW_KW_515530019 	 priority "
  puts $LOG "`define	VW_KW_1713258270 	 program "
  puts $LOG "`define	VW_KW_1573363368 	 property "
  puts $LOG "`define	VW_KW_1409959708 	 protected "
  puts $LOG "`define	VW_KW_2077486715 	 pull0 "
  puts $LOG "`define	VW_KW_1373226340 	 pull1 "
  puts $LOG "`define	VW_KW_1631518149 	 pulldown "
  puts $LOG "`define	VW_KW_200747796 	 pullup "
  puts $LOG "`define	VW_KW_289700723 	 pulsestyle_ondetect "
  puts $LOG "`define	VW_KW_1117142618 	 pulsestyle_onevent "
  puts $LOG "`define	VW_KW_168002245 	 pure"
  puts $LOG "`define	VW_KW_150122846 	 rand "
  puts $LOG "`define	VW_KW_439493451 	 randc "
  puts $LOG "`define	VW_KW_990892921 	 randcase "
  puts $LOG "`define	VW_KW_1760243555 	 randsequence "
  puts $LOG "`define	VW_KW_1231192379 	 rcmos "
  puts $LOG "`define	VW_KW_1622597488 	 real "
  puts $LOG "`define	VW_KW_111537764 	 realtime "
  puts $LOG "`define	VW_KW_338888228 	 ref "
  puts $LOG "`define	VW_KW_2147469841 	 reg "
  puts $LOG "`define	VW_KW_438792350 	 reject_on "
  puts $LOG "`define	VW_KW_1911165193 	 release "
  puts $LOG "`define	VW_KW_269441500 	 repeat "
  puts $LOG "`define	VW_KW_2142757034 	 restrict "
  puts $LOG "`define	VW_KW_116087764 	 return "
  puts $LOG "`define	VW_KW_1869470124 	 rnmos "
  puts $LOG "`define	VW_KW_155324914 	 rpmos "
  puts $LOG "`define	VW_KW_8936987 	 rtran "
  puts $LOG "`define	VW_KW_1982275856 	 rtranif0 "
  puts $LOG "`define	VW_KW_1275373743 	 rtranif1 "
  puts $LOG "`define	VW_KW_387346491 	 s_always "
  puts $LOG "`define	VW_KW_350322227 	 s_eventually "
  puts $LOG "`define	VW_KW_841148365 	 s_nexttime "
  puts $LOG "`define	VW_KW_1960709859 	 s_until "
  puts $LOG "`define	VW_KW_1760281936 	 s_until_with "
  puts $LOG "`define	VW_KW_771151432 	 scalared "
  puts $LOG "`define	VW_KW_1186452551 	 sequence "
  puts $LOG "`define	VW_KW_1244316437 	 shortint "
  puts $LOG "`define	VW_KW_971899228 	 shortreal "
  puts $LOG "`define	VW_KW_1476153275 	 showcancelled "
  puts $LOG "`define	VW_KW_213975407 	 signed "
  puts $LOG "`define	VW_KW_1139901474 	 small "
  puts $LOG "`define	VW_KW_1626276121 	 soft "
  puts $LOG "`define	VW_KW_653468858 	 solve "
  puts $LOG "`define	VW_KW_2130794395 	 specify "
  puts $LOG "`define	VW_KW_1239036029 	 specparam "
  puts $LOG "`define	VW_KW_1884661237 	 static "
  puts $LOG "`define	VW_KW_1605908235 	 string "
  puts $LOG "`define	VW_KW_1350573793 	 strong "
  puts $LOG "`define	VW_KW_76065818 	 strong0 "
  puts $LOG "`define	VW_KW_1605894428 	 strong1 "
  puts $LOG "`define	VW_KW_1789366143 	 struct "
  puts $LOG "`define	VW_KW_1987231011 	 super "
  puts $LOG "`define	VW_KW_1875335928 	 supply0 "
  puts $LOG "`define	VW_KW_1784639529 	 supply1 "
  puts $LOG "`define	VW_KW_2103318776 	 sync_accept_on "
  puts $LOG "`define	VW_KW_1597322404 	 sync_reject_on "
  puts $LOG "`define	VW_KW_1939964443 	 table "
  puts $LOG "`define	VW_KW_2112255763 	 tagged "
  puts $LOG "`define	VW_KW_1432114613 	 task "
  puts $LOG "`define	VW_KW_1067854538 	 this "
  puts $LOG "`define	VW_KW_352118606 	 throughout "
  puts $LOG "`define	VW_KW_1909002904 	 timeprecision "
  puts $LOG "`define	VW_KW_165344818 	 timeunit "
  puts $LOG "`define	VW_KW_1395235128 	 tran "
  puts $LOG "`define	VW_KW_532670688 	 tranif0 "
  puts $LOG "`define	VW_KW_1351797369 	 tranif1 "
  puts $LOG "`define	VW_KW_492067917 	 tri "
  puts $LOG "`define	VW_KW_1504569917 	 tri0 "
  puts $LOG "`define	VW_KW_680466996 	 tri1 "
  puts $LOG "`define	VW_KW_706043324 	 triand "
  puts $LOG "`define	VW_KW_496987743 	 trior "
  puts $LOG "`define	VW_KW_159259470 	 trireg "
  puts $LOG "`define	VW_KW_1359512183 	 type "
  puts $LOG "`define	VW_KW_480298490 	 typedef "
  puts $LOG "`define	VW_KW_1398295499 	 union "
  puts $LOG "`define	VW_KW_1096689772 	 unique "
  puts $LOG "`define	VW_KW_2086206725 	 unique0 "
  puts $LOG "`define	VW_KW_601385644 	 unsigned "
  puts $LOG "`define	VW_KW_1172755590 	 until "
  puts $LOG "`define	VW_KW_1544617505 	 until_with "
  puts $LOG "`define	VW_KW_243268139 	 untyped "
  puts $LOG "`define	VW_KW_1012502954 	 use "
  puts $LOG "`define	VW_KW_1272469786 	 uwire "
  puts $LOG "`define	VW_KW_2027907669 	 var "
  puts $LOG "`define	VW_KW_968338082 	 vectored "
  puts $LOG "`define	VW_KW_722308542 	 virtual "
  puts $LOG "`define	VW_KW_1820388464 	 void "
  puts $LOG "`define	VW_KW_933110197 	 wait "
  puts $LOG "`define	VW_KW_6939507 	 wait_order "
  puts $LOG "`define	VW_KW_740759355 	 wand "
  puts $LOG "`define	VW_KW_1285228804 	 weak "
  puts $LOG "`define	VW_KW_1789376348 	 weak0 "
  puts $LOG "`define	VW_KW_502278611 	 weak1 "
  puts $LOG "`define	VW_KW_1450573622 	 while "
  puts $LOG "`define	VW_KW_1037127828 	 wildcard "
  puts $LOG "`define	VW_KW_1034949299 	 wire "
  puts $LOG "`define	VW_KW_654887343 	 with "
  puts $LOG "`define	VW_KW_1529195746 	 within "
  puts $LOG "`define	VW_KW_392035568 	 wor "
  puts $LOG "`define	VW_KW_1335354340 	 xnor "
  puts $LOG "`define	VW_KW_87755422 	 xor "
}


#Go2uvm Macros 
proc vw_go2uvm_macros { LOG } {
  puts $LOG "`include \"vw_enc_kw.v\" "
  puts $LOG "//----------------------------------------------------------------------"
  puts $LOG "//   Copyright 2004-2014 VerifWorks a venture of CVC Pvt Ltd."  
  puts $LOG "//   All Rights Reserved Worldwide"
  puts $LOG "//"
  puts $LOG "//   Licensed under the Apache License, Version 2.0 (the"
  puts $LOG "//  \"License\"); you may `VW_KW_524872353 `VW_KW_1012502954 `VW_KW_1067854538 file except in"
  puts $LOG "//   compliance `VW_KW_654887343 the License.You may obtain a copy of the License at"
  puts $LOG "//"   
  puts $LOG "//       http://www.apache.org/licenses/LICENSE-2.0"
  puts $LOG "//"
  puts $LOG "//   Unless required by applicable law `VW_KW_1703964683 agreed to in"
  puts $LOG "//   writing, software distributed under the License is"
  puts $LOG "//   distributed on an \"AS IS \" BASIS, WITHOUT WARRANTIES OR"
  puts $LOG "//   CONDITIONS OF ANY KIND, either express `VW_KW_1703964683 implied"
  puts $LOG "//   See the License `VW_KW_1585990364 the specific language governing"
  puts $LOG "//   permissions `VW_KW_719885386 limitations under the License."
  puts $LOG "//----------------------------------------------------------------------"
  puts $LOG "//"
  puts $LOG "// Protect against multiple inclusion of `VW_KW_1067854538 file"
  puts $LOG "//"
  puts $LOG ""
  puts $LOG "`ifndef VW_Go2UVM_MACROS_SV"
  puts $LOG "`define VW_Go2UVM_MACROS_SV"
  puts $LOG ""
  puts $LOG "`define vw_g2u_display(ID,MSG,VERBOSITY) \\"
  puts $LOG "   `VW_KW_783368690 \\"
  puts $LOG "     if (uvm_report_enabled(VERBOSITY,UVM_INFO,ID)) \\"
  puts $LOG "       uvm_report_info (ID, MSG, VERBOSITY); \\"
  puts $LOG "   `VW_KW_2038664370"
  puts $LOG ""
  puts $LOG "`define vw_uvm_warning(ID,MSG) \\"
  puts $LOG "   `VW_KW_783368690 \\"
  puts $LOG "     if (uvm_report_enabled(UVM_NONE,UVM_WARNING,ID)) \\"
  puts $LOG "       uvm_report_warning (ID, MSG, UVM_NONE); \\"
  puts $LOG "   `VW_KW_2038664370"
  puts $LOG ""
  puts $LOG "`define vw_uvm_error(ID,MSG) \\"
  puts $LOG "   `VW_KW_783368690 \\"
  puts $LOG "    if (uvm_report_enabled(UVM_NONE,UVM_ERROR,ID)) \\"
  puts $LOG "      uvm_report_error (ID, MSG, UVM_NONE); \\"
  puts $LOG "   `VW_KW_2038664370"
  puts $LOG ""
  puts $LOG "`define vw_go2uvm_test(TST, VIF) \\"
  puts $LOG "   TST vw_go2uvm_test_0; \\"
  puts $LOG "    `VW_KW_1956297539 `VW_KW_783368690 : stim \\"
  puts $LOG "      vw_go2uvm_test_0 = `VW_KW_1610120709 (); \\"
  puts $LOG "      vw_go2uvm_test_0.vif = VIF; \\"
  puts $LOG "      run_test (); \\"
  puts $LOG "    `VW_KW_2038664370 : stim"
  puts $LOG ""
  puts $LOG ""
  puts $LOG ""
  puts $LOG "`endif // VW_Go2UVM_MACROS_SV"
}

#Go2UVM package
proc vw_go2uvm_package { log } {
puts $log "`include \"vw_enc_kw.v\""
puts $log "//----------------------------------------------------------------------"
puts $log "//   Copyright 2004-2016 VerifWorks a venture of CVC Pvt Ltd."
puts $log "//   All Rights Reserved Worldwide"
puts $log "//"
puts $log "//   Licensed under the Apache License, Version 2.0 (the \"License\");" 
puts $log "//   you may `VW_KW_524872353 `VW_KW_1012502954 `VW_KW_1067854538 file except in"
puts $log "//   compliance `VW_KW_654887343 the License.  You may obtain a copy of"
puts $log "//   the License at"
puts $log "//"
puts $log "//       http://www.apache.org/licenses/LICENSE-2.0"
puts $log "//"
puts $log "//   Unless required by applicable law `VW_KW_1703964683 agreed to in"
puts $log "//   writing, software distributed under the License is"
puts $log "//   distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR"
puts $log "//   CONDITIONS OF ANY KIND, either express `VW_KW_1703964683 implied.  See"
puts $log "//   the License `VW_KW_1585990364 the specific language governing"
puts $log "//   permissions `VW_KW_719885386 limitations under the License."
puts $log "//----------------------------------------------------------------------"
puts $log ""
puts $log "//----------------------------------------------------------------------"
puts $log "`ifndef VW_GO2UVM_SVH"
puts $log "`define VW_GO2UVM_SVH"
puts $log ""
puts $log ""
puts $log "`VW_KW_1600028624 vw_go2uvm_pkg;"
puts $log "  `VW_KW_855636226 uvm_pkg::*;"
puts $log "  `VW_KW_939819582 uvm_pkg::*;"
puts $log "  `include \"uvm_macros.svh\""
puts $log "  `include \"vw_go2uvm_version.svh\""
puts $log "  `include \"vw_go2uvm_macros.svh\""
puts $log ""
puts $log "  `VW_KW_1605908235 log_id = \"Go2UVM\";"
puts $log ""
puts $log "  `VW_KW_2040332871 `VW_KW_1605908235 UVM_VW_COPYRIGHT   = \"(C) 2004-2016 Verifworks a venture of CVC Pvt Ltd.\";"
puts $log ""
puts $log "  `VW_KW_722308542 `VW_KW_2145174067 go2uvm_base_test `VW_KW_2001100545 uvm_test;"
puts $log "    `VW_KW_1998898814 `VW_KW_722308542 `VW_KW_1889947178 `VW_KW_1820388464 end_of_elaboration_phase (uvm_phase phase);"
puts $log "    `VW_KW_1998898814 `VW_KW_722308542 `VW_KW_1432114613 reset_phase (uvm_phase phase);"
puts $log "    `VW_KW_1998898814 `VW_KW_722308542 `VW_KW_1432114613 reset ();"
puts $log "    `VW_KW_1998898814 `VW_KW_722308542 `VW_KW_1432114613 main_phase (uvm_phase phase);"
puts $log "    `VW_KW_168002245 `VW_KW_722308542 `VW_KW_1432114613 main ();"
puts $log "    `VW_KW_1998898814 `VW_KW_722308542 `VW_KW_1889947178 `VW_KW_1820388464 report_header (UVM_FILE file = 0 );"
puts $log "    `VW_KW_1998898814 `VW_KW_1889947178 `VW_KW_1820388464 report_phase (uvm_phase phase);"
puts $log ""  
puts $log "    `VW_KW_1605908235 vw_run_log_fname = \"vw_go2uvm_run.log\";"
puts $log "    UVM_FILE vw_log_f;"
puts $log ""
puts $log "    `VW_KW_1889947178 `VW_KW_1610120709 (`VW_KW_1605908235 name = log_id, uvm_component parent = `VW_KW_269455306);"
puts $log "      `VW_KW_317097467 ferr;"
puts $log "      `VW_KW_1605908235 err_str;"
puts $log ""
puts $log "      `VW_KW_1987231011.`VW_KW_1610120709 (log_id, `VW_KW_269455306);"
puts $log "      \$timeformat (-9, 2,\" ns\",10);"
puts $log "      `VW_KW_1067854538.vw_log_f = \$fopen (vw_run_log_fname, \"w\");"
puts $log "      ferr = \$ferror (`VW_KW_1067854538.vw_log_f, err_str);"
puts $log "      `ifdef _VCP"
puts $log "        `VW_KW_1649760492 (ferr == 0)"
puts $log "      `else // _VCP"
puts $log "        a_f_err : `VW_KW_1649760492 (ferr == 0)" 
puts $log "      `endif // _VCP"
puts $log "        `VW_KW_783368690 : pass_ablk"
puts $log "          // Set `VW_KW_1653377373 log file"
puts $log "          set_report_default_file(vw_log_f);"
puts $log "          set_report_severity_action_hier(UVM_INFO, 
            UVM_DISPLAY | UVM_LOG);"
puts $log "          set_report_severity_action_hier(UVM_WARNING, 
            UVM_DISPLAY | UVM_LOG);"
puts $log "          set_report_severity_action_hier(UVM_ERROR, 
            UVM_DISPLAY | UVM_LOG| UVM_COUNT);"
puts $log "          set_report_severity_action_hier(UVM_FATAL, 
            UVM_DISPLAY | UVM_LOG| UVM_EXIT);"
puts $log ""
puts $log "          // Do the same `VW_KW_1585990364 `VW_KW_491705403 reporter"
puts $log "          uvm_top.set_report_default_file(vw_log_f);"
puts $log "          uvm_top.set_report_severity_action_hier(UVM_INFO, 
            UVM_DISPLAY | UVM_LOG);"
puts $log "          uvm_top.set_report_severity_action_hier(UVM_WARNING, 
            UVM_DISPLAY | UVM_LOG);"
puts $log "          uvm_top.set_report_severity_action_hier(UVM_ERROR, 
            UVM_DISPLAY | UVM_LOG | UVM_COUNT);"
puts $log "          uvm_top.set_report_severity_action_hier(UVM_FATAL, 
            UVM_DISPLAY | UVM_LOG | UVM_EXIT);"
puts $log "         `VW_KW_2038664370 : pass_ablk"
puts $log "       else `VW_KW_783368690 : fail_ablk"
puts $log "        `uvm_warning (log_id,
         \$sformatf (\"Output log file: %s  could `VW_KW_524872353 be opened `VW_KW_1585990364 writing, File Open Failed `VW_KW_654887343 Error Code = %0d ERR-`VW_KW_1605908235: %s\", 
           vw_run_log_fname, ferr, err_str))"
puts $log "       `VW_KW_2038664370 : fail_ablk"
puts $log "      `VW_KW_1067854538.report_header ();"
puts $log "" 
puts $log "    `VW_KW_749241873 : `VW_KW_1610120709"
puts $log ""
puts $log "  `VW_KW_412776091 : go2uvm_base_test"
puts $log ""
puts $log "  `VW_KW_1889947178 `VW_KW_1820388464 go2uvm_base_test::end_of_elaboration_phase (uvm_phase phase);"
puts $log "    `ifdef SVA_2012"
puts $log "     \$assertvacuousoff();"
puts $log "    `endif // SVA_2012"
puts $log "  `VW_KW_749241873 : end_of_elaboration_phase" 
puts $log ""
puts $log "  `VW_KW_1432114613 go2uvm_base_test::reset_phase (uvm_phase phase);"
puts $log "    phase.raise_objection (`VW_KW_1067854538);"
puts $log "    `VW_KW_1067854538.reset();"
puts $log "    phase.drop_objection (`VW_KW_1067854538);"
puts $log "  `VW_KW_1632621729 : reset_phase "
puts $log ""
puts $log "  `VW_KW_1432114613 go2uvm_base_test::reset ();"
puts $log "    `vw_uvm_warning (log_id, \"No implementation found for reset method. It is recommended to add reset driving logic to the extended class task reset; See user guide or http://www.verifworks.com for more information\")"
puts $log "  `VW_KW_1632621729 : reset"
puts $log ""
puts $log "  `VW_KW_1432114613 go2uvm_base_test::main_phase (uvm_phase phase);"
puts $log "    phase.raise_objection (`VW_KW_1067854538);"
puts $log "    `vw_g2u_display (log_id, \"Driving stimulus via UVM\", UVM_MEDIUM)"
puts $log "    `VW_KW_1067854538.main ();"
puts $log "    `vw_g2u_display (log_id, \"End of stimulus\", UVM_MEDIUM)"
puts $log "    phase.drop_objection (`VW_KW_1067854538);"
puts $log "`VW_KW_1632621729 : main_phase"
puts $log ""
puts $log ""
puts $log "   // More ideas/thoughts"
puts $log "   // Can we print failed assertions (once per assertion)"
puts $log "   //    coverage information"
puts $log "   //   Any assertoff control"
puts $log ""
puts $log "`VW_KW_1889947178 `VW_KW_1820388464 go2uvm_base_test::report_header (UVM_FILE file = 0 );"
puts $log "  `VW_KW_1605908235 q\[$], vw_rel_str;"
puts $log "  vw_go2uvm_version g2u_ver;"
puts $log ""
puts $log "  g2u_ver = `VW_KW_1610120709 ();"
puts $log "  vw_rel_str = \$sformatf(\"\\n----------------------------------------------------------------\\n\");"
puts $log "  vw_rel_str = \$sformatf({vw_rel_str, UVM_VW_COPYRIGHT,\"\\n\"});"
puts $log "  vw_rel_str = \$sformatf({vw_rel_str, g2u_ver.psdisplay(),\"\\n\"});"
puts $log "  vw_rel_str = \$sformatf({vw_rel_str, 
                    \"\\n  ***********       IMPORTANT RELEASE NOTES         ************\\n\"});"
puts $log "  vw_rel_str = \$sformatf({vw_rel_str, 
      \"\\n  You are using a version of the Go2UVM Package from VerifWorks \",
      \"\\n  a venture of CVC Pvt Ltd http://www.cvcblr.com\\n\"});"
puts $log "  vw_rel_str = \$sformatf({vw_rel_str, \"  See http://www.verifworks.com for more details \\n\"});"
puts $log "  vw_rel_str = \$sformatf({vw_rel_str, \"\\n----------------------------------------------------------------\\n\"});"
puts $log ""
puts $log ""
puts $log "  `vw_g2u_display(log_id, \$sformatf(\"RELNOTES \\n%s\", vw_rel_str), UVM_NONE)"
puts $log ""
puts $log "`VW_KW_749241873 : report_header "
puts $log ""
puts $log "`VW_KW_1889947178 `VW_KW_1820388464 go2uvm_base_test::report_phase (uvm_phase phase);"
puts $log "  uvm_report_server srvr;"           
puts $log "  `VW_KW_317097467 vw_num_errs;"
puts $log ""  
puts $log "  srvr = get_report_server();"
puts $log "  vw_num_errs = srvr.get_severity_count(UVM_ERROR);"
puts $log "  if(vw_num_errs > 0) `VW_KW_783368690 : fail"
puts $log "    `vw_g2u_display (log_id, \$sformatf
        (\"Test FAILED with %0d error(s), look for UVM_ERROR in log file: %s\",
        vw_num_errs, vw_run_log_fname), UVM_NONE)"
puts $log "  `VW_KW_2038664370 : fail"
puts $log "  else `VW_KW_783368690 : pass"
puts $log "    `vw_g2u_display (log_id, \$sformatf
        (\"Congratulations! Test PASSED! Review your log file: %s\",
        vw_run_log_fname), UVM_NONE)"
puts $log "  `VW_KW_2038664370 : pass"
puts $log ""
puts $log "  `vw_g2u_display (log_id, 
    \"Thanks for using VerifWorks's Go2UVM Package, provide your feedback at http://www.verifworks.com\",
    UVM_NONE)"
puts $log "`VW_KW_749241873 : report_phase"
puts $log "" 
puts $log "`VW_KW_511702305 : vw_go2uvm_pkg"
puts $log "`endif // VW_GO2UVM_SVH"

}

##### Go2uvm version 
proc vw_go2uvm_version { LOG } {
  puts $LOG "`include \"vw_enc_kw.v\""
  puts $LOG "//----------------------------------------------------------------------"
  puts $LOG "//   Copyright 2004-2014 VerifWorks a venture of CVC Pvt Ltd.  "
  puts $LOG "//   All Rights Reserved Worldwide"
  puts $LOG "//   "
  puts $LOG "//   Licensed under the Apache License, Version 2.0 (the\"License\");"
  puts $LOG "// you may `VW_KW_524872353 `VW_KW_1012502954 `VW_KW_1067854538 file except in"
  puts $LOG "//   compliance `VW_KW_654887343 the License.  You may obtain a copy of"
  puts $LOG "//   the License at"
  puts $LOG "//"
  puts $LOG "//       http://www.apache.org/licenses/LICENSE-2.0"
  puts $LOG "//"
  puts $LOG "//   Unless required by applicable law `VW_KW_1703964683 agreed to in"
  puts $LOG "//   writing, software distributed under the License is"
  puts $LOG "//   distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR"
  puts $LOG "//   CONDITIONS OF ANY KIND, either express `VW_KW_1703964683 implied.  See"
  puts $LOG "//   the License `VW_KW_1585990364 the specific language governing"
  puts $LOG "//   permissions `VW_KW_719885386 limitations under the License."
  puts $LOG "//----------------------------------------------------------------------"
  puts $LOG "//"
  puts $LOG " // Protect against multiple inclusion of `VW_KW_1067854538 file"
  puts $LOG " //"
  puts $LOG " `ifndef VW_Go2UVM_VERSION_SV"
  puts $LOG " `define VW_Go2UVM_VERSION_SV"
  puts $LOG ""
  puts $LOG " // /////////////////////////////////////////////"
  puts $LOG " // Class: vw_go2uvm_version"
  puts $LOG " // Base `VW_KW_2145174067 `VW_KW_1585990364 defining VW_Go2UVM Stdlib versions"
  puts $LOG " // Use model"
  puts $LOG " // |"
  puts $LOG " // | `VW_KW_1605908235 get_ver;"
  puts $LOG " // | vw_go2uvm_version g2u_ver;"
  puts $LOG " // |"
  puts $LOG " // | `VW_KW_1956297539 `VW_KW_783368690 : print_ver"
  puts $LOG " // |   g2u_ver = `VW_KW_1610120709 ();"
  puts $LOG " // |   get_ver = g2u_ver.psdisplay();"
  puts $LOG " // |   `g2u_display (\"Go2UVM\", get_ver, UVM_MEDIUM);"
  puts $LOG " // | `VW_KW_2038664370 : print_ver"
  puts $LOG ""
  puts $LOG " `VW_KW_2145174067 vw_go2uvm_version;"
  puts $LOG "  `VW_KW_1998898814 `VW_KW_1889947178 `VW_KW_317097467 get_major_ver();"
  puts $LOG "  `VW_KW_1998898814 `VW_KW_1889947178 `VW_KW_1605908235 get_sub_ver();"
  puts $LOG "  `VW_KW_1998898814 `VW_KW_1889947178 `VW_KW_317097467 get_vw_g2u_ver();"
  puts $LOG "  `VW_KW_1998898814 `VW_KW_1889947178 `VW_KW_1605908235 get_vendor();"
  puts $LOG ""
  puts $LOG "  `VW_KW_1998898814 `VW_KW_1889947178 `VW_KW_1820388464 display(`VW_KW_1605908235 prefix = \"\");"
  puts $LOG "  `VW_KW_1998898814 `VW_KW_1889947178 `VW_KW_1605908235 psdisplay(`VW_KW_1605908235 prefix = \"\");"
  puts $LOG "  `VW_KW_412776091: vw_go2uvm_version"
  puts $LOG ""
  puts $LOG " // ////////////////////////////////////////////"
  puts $LOG " // `VW_KW_1889947178 : get_major_ver"
  puts $LOG " //"
  puts $LOG " // Returns the get_major_ver version number of the implemented VW_Go2UVM Standard Library. Should `VW_KW_1681692777"
  puts $LOG " // `VW_KW_116087764 1."
  puts $LOG " //"
  puts $LOG " `VW_KW_1889947178 `VW_KW_317097467 vw_go2uvm_version::get_major_ver();"
  puts $LOG "  get_major_ver = 1;"
  puts $LOG " `VW_KW_749241873 : get_major_ver"
  puts $LOG ""
  puts $LOG "  // ////////////////////////////////////////////"
  puts $LOG "  // `VW_KW_1889947178 : get_sub_ver"
  puts $LOG "  //"
  puts $LOG "  // Returns the get_sub_ver version number of the implemented VW_Go2UVM Standard Library. Should `VW_KW_1681692777"
  puts $LOG "  // `VW_KW_116087764 10, if the additions `VW_KW_719885386 updates specified in `VW_KW_1067854538 `VW_KW_1600028624 are fully implemented."
  puts $LOG "  //"
  puts $LOG "  //"
  puts $LOG "  `VW_KW_1889947178 `VW_KW_1605908235 vw_go2uvm_version::get_sub_ver();"
  puts $LOG "   get_sub_ver = \"1d\";"
  puts $LOG "  `VW_KW_749241873 : get_sub_ver"
  puts $LOG ""
  puts $LOG "  // ////////////////////////////////////////////"
  puts $LOG "  // `VW_KW_1889947178 : get_vw_g2u_ver"
  puts $LOG "  //"
  puts $LOG "  // Returns the get_vw_g2u_ver number of the implemented VW_Go2UVM Standard Library. The returned value"
  puts $LOG "  // is get_vendor-dependent."
  puts $LOG "  //"
  puts $LOG " `VW_KW_1889947178 `VW_KW_317097467 vw_go2uvm_version::get_vw_g2u_ver();"
  puts $LOG "  get_vw_g2u_ver = 5;"
  puts $LOG " `VW_KW_749241873 : get_vw_g2u_ver"
  puts $LOG ""
  puts $LOG ""
  puts $LOG " `VW_KW_1889947178 `VW_KW_1605908235 vw_go2uvm_version::get_vendor();"
  puts $LOG "  get_vendor = \"Verifworks http://www.verifworks.com \";"
  puts $LOG " `VW_KW_749241873 : get_vendor"
  puts $LOG ""
  puts $LOG " // ////////////////////////////////////////////"
  puts $LOG " // `VW_KW_1889947178 : display"
  puts $LOG " //"
  puts $LOG " // Displays the version image returned by the psdisplay() method, to the standard `VW_KW_352406219."
  puts $LOG " //"
  puts $LOG " // The argument prefix is used to append a `VW_KW_1605908235 to the content displayed by `VW_KW_1067854538 method."
  puts $LOG " //"
  puts $LOG " //"
  puts $LOG " `VW_KW_1889947178 `VW_KW_1820388464 vw_go2uvm_version::display(`VW_KW_1605908235 prefix = \"\");"
  puts $LOG "\$write(\"%s\\n\", `VW_KW_1067854538.psdisplay(prefix));"
  puts $LOG " `VW_KW_749241873 : display"
  puts $LOG ""
  puts $LOG " // ////////////////////////////////////////////"
  puts $LOG " // `VW_KW_1889947178 : psdisplay"
  puts $LOG " //"
  puts $LOG " // Creates a well formatted image of the VW_Go2UVM Standard Library implementation version"
  puts $LOG " // information. The format is:"
  puts $LOG " // prefix VW_Go2UVM Version get_major_ver.get_sub_ver.get_vw_g2u_ver (get_vendor)"
  puts $LOG " //"
  puts $LOG " `VW_KW_1889947178 `VW_KW_1605908235 vw_go2uvm_version::psdisplay(`VW_KW_1605908235 prefix = \"\");
   \$sformat(psdisplay, \"%s VW_Go2UVM Version %0d.%s.%0d (%s)\",
   prefix, `VW_KW_1067854538.get_major_ver(), `VW_KW_1067854538.get_sub_ver(), `VW_KW_1067854538.get_vw_g2u_ver(),`VW_KW_1067854538.get_vendor());"
  puts $LOG " `VW_KW_749241873 : psdisplay"
  puts $LOG "`endif // VW_Go2UVM_VERSION_SV"

}


#################
# run_dir files
#################

#Makefile
proc g2u_makefile { LOG top_mod } {
  set mod_name $top_mod
  puts $LOG "clean:"
  puts $LOG "\trm -fr work* compile qver* *.wlf *.log *.asdb *.cfg transc* INCA* irun*"
  puts $LOG ""
  puts $LOG "cdn:clean"
  puts $LOG "\tirun -sv -uvm -f go2uvm_flist -incdir ../go2uvm"
  puts $LOG ""
  puts $LOG "questa:clean"
  puts $LOG "\tvlib work"
  puts $LOG "\tvlog -sv -f go2uvm_flist"
  set mk_file [format "\tvsim -c %s_go2uvm -do \"run -all;quit\"" $top_mod]
  puts $LOG "$mk_file"
  puts $LOG ""
  puts $LOG "rvra:clean"
  puts $LOG "\tvsim -c -do rvra_run.do"
  puts $LOG ""
  puts $LOG "rvra_gui:clean"
  puts $LOG "\tvsim -do rvra_run.do"
  
}

#flist
proc g2u_flist { LOG top_mod} {
  set mod_name $top_mod
  puts $LOG "+incdir+../vw_go2uvm_src"
  puts $LOG "+incdir+../go2uvm"
  puts $LOG "../vw_go2uvm_src/vw_go2uvm_pkg.sv"
  puts $LOG ""
  puts $LOG "#Give your DUT file name along with path"
  puts $LOG ""
  puts $LOG ""
  set flist_hdr [format "../go2uvm/%s_go2uvm_top.sv" $top_mod]
  puts $LOG "$flist_hdr"
}


#rvra_run_do
proc g2u_run_do { LOG top_mod} {
  set mod_name $top_mod
  puts $LOG "#clear the console"
  puts $LOG "clear"
  puts $LOG ""
  puts $LOG "# create project library and make sure it is empty"
  puts $LOG "alib work"
  puts $LOG "adel -all"
  puts $LOG ""
  puts $LOG "# compile project's source file (alongside the UVM library)"
  puts $LOG "alog \$UVMCOMP -msg 0 -dbg -f go2uvm_flist"
  puts $LOG ""
  set rvra_log [format "#transcript file go2uvm_%s_comp.log" $top_mod]
  puts $LOG "$rvra_log"
  puts $LOG ""
  puts $LOG "# run simulation"
  set run_do [format "asim +access +rw  \$UVMSIM go2uvm_%s +UVM_VERBOSITY=UVM_FULL" $top_mod]
  puts $LOG "$run_do"
  set run_file [format "wave -rec sim:/go2uvm_%s/* \nrun -all" $top_mod]
  puts $LOG "$run_file"
  set $LOG ""
}  


proc go2uvm {top_mod } {
  ##########################
  # main function for go2uvm
  ##########################
  exec mkdir ../go2uvm
  set op_if_fname [format "../go2uvm/%s_if.sv" $top_mod]
  set op_top_fname [format "../go2uvm/%s_go2uvm_top.sv" $top_mod]
  set op_test_fname [format "../go2uvm/%s_go2uvm_test.svi" $top_mod]
  set IF_LOG [open $op_if_fname "w"]
  set TOP_LOG [open $op_top_fname "w"]
  set TEST_LOG [open $op_test_fname "w"]
  dump_header $IF_LOG 
  dump_header $TOP_LOG 
  dump_header $TEST_LOG 
  vw_dvc_svi $IF_LOG $top_mod
  vw_dvc_g2u_top_mod $TOP_LOG $top_mod $op_if_fname $op_test_fname
  vw_dvc_g2u_test $TEST_LOG $top_mod

  ######################################
  # main function for library automation 
  ######################################
  exec mkdir ../vw_go2uvm_src
  set op_enc_kw_fname "../vw_go2uvm_src/vw_enc_kw.v"
  set op_go2uvm_macros "../vw_go2uvm_src/vw_go2uvm_macros.svh" 
  set op_go2uvm_pkg "../vw_go2uvm_src/vw_go2uvm_pkg.sv" 
  set op_go2uvm_version "../vw_go2uvm_src/vw_go2uvm_version.svh"

  set ENC_LOG [open $op_enc_kw_fname "w"]
  set MAC_LOG [open $op_go2uvm_macros "w"]
  set PKG_LOG [open $op_go2uvm_pkg "w"]
  set VER_LOG [open $op_go2uvm_version "w"]

  vw_go2uvm_enc_keyword $ENC_LOG 
  vw_go2uvm_macros $MAC_LOG
  vw_go2uvm_package $PKG_LOG
  vw_go2uvm_version $VER_LOG

  ###########################
  # main function for run_dir 
  ###########################
  exec mkdir ../run_dir
  set op_make "../run_dir/Makefile"
  set op_run_do "../run_dir/rvra_run.do"
  set op_flist "../run_dir/go2uvm_flist"

  set MK_LOG [open $op_make "w"]
  set RUN_LOG [open $op_run_do "w"]
  set LIST_LOG [open $op_flist "w"]
  
  g2u_makefile $MK_LOG $top_mod
  g2u_run_do $RUN_LOG $top_mod
  g2u_flist $LIST_LOG $top_mod

  
  close $MK_LOG
  close $RUN_LOG 
  close $LIST_LOG

  close $ENC_LOG
  close $MAC_LOG
  close $PKG_LOG
  close $VER_LOG

  close $IF_LOG
  close $TOP_LOG
  close $TEST_LOG

  puts "Successfully generated Go2UVM TB & Test for module: $top_mod "
  puts "See file: $op_top_fname for Go2UVM code"
  puts "Thanks for using VerifWorks products"
  puts "Visit http://www.verifworks.com for more "
}


